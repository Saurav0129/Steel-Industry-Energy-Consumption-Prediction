# -*- coding: utf-8 -*-
"""energy_consumption_predictor.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17EJKbwWEUVKhM2ODi_q150IBDXv41HxI
"""

import streamlit as st
import pickle
import pandas as pd
from sklearn.preprocessing import StandardScaler

# Load the saved Linear Regression model
with open('linear_regression_model.pkl', 'rb') as file:
    model = pickle.load(file)

# Load the SelectKBest feature selection results
selected_features = pd.DataFrame({
    'columns': ['Lagging_Current_Reactive.Power_kVarh', 'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)',
                'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM',
                'WeekStatus_Weekday', 'WeekStatus_Weekend', 'Day_of_week_Sunday',
                'Load_Type_Light_Load', 'Load_Type_Maximum_Load'],
    'Kept': [True, True, True, True, True, False, True, True, True, True, True]
})

def preprocess_input(features):
    # Perform one-hot encoding on categorical features
    features_encoded = pd.get_dummies(features, columns=['WeekStatus', 'Day_of_week', 'Load_Type'])

    # Keep only the selected features
    features_selected = features_encoded[selected_features[selected_features['Kept'] == True]['columns']]

    # Apply feature scaling using StandardScaler
    scaler = StandardScaler()
    features_scaled = scaler.fit_transform(features_selected)

    return features_scaled

def main(selected_features):
    st.title("Energy Consumption Predictor")

    # Create input fields for user input
    lagging_power = st.number_input('Lagging Power')
    leading_power = st.number_input('Leading Power')
    co2_emissions = st.number_input('CO2 Emissions')
    nsm = st.number_input('NSM')
    week_status = st.selectbox('Week Status', selected_features[selected_features['columns'].str.startswith('WeekStatus')]['columns'])
    day_of_week = st.selectbox('Day of Week', selected_features[selected_features['columns'].str.startswith('Day_of_week')]['columns'])
    load_type = st.selectbox('Load Type', selected_features[selected_features['columns'].str.startswith('Load_Type')]['columns'])

    # Create a dataframe from the user input
    user_input = pd.DataFrame({
        'Lagging_Current_Reactive.Power_kVarh': [lagging_power],
        'Leading_Current_Reactive_Power_kVarh': [leading_power],
        'CO2(tCO2)': [co2_emissions],
        'Lagging_Current_Power_Factor': [0],  # Placeholder value, not used in prediction
        'Leading_Current_Power_Factor': [0],  # Placeholder value, not used in prediction
        'NSM': [nsm],
        'WeekStatus_Weekday': [1 if week_status == 'WeekStatus_Weekday' else 0],
        'WeekStatus_Weekend': [1 if week_status == 'WeekStatus_Weekend' else 0],
        'Day_of_week_Sunday': [1 if day_of_week == 'Day_of_week_Sunday' else 0],
        'Load_Type_Light_Load': [1 if load_type == 'Load_Type_Light_Load' else 0],
        'Load_Type_Maximum_Load': [1 if load_type == 'Load_Type_Maximum_Load' else 0]
    })

    # Preprocess the user input
    preprocessed_input = preprocess_input(user_input)

    # Make predictions using the loaded model
    prediction = model.predict(preprocessed_input)

    # Display the predicted energy consumption
    st.write('Predicted Energy Consumption:', prediction)